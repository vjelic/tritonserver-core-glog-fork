{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-5b00e3a8-b610-4b94-b32b-0f0a36031880",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-a50c1729-64a4-4801-922f-7798d56eecc1",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS162092"
                ]
              }
            },
            {
              "id": "glog-f75ef13f-3594-4bbc-8d1b-b76a49427960",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-cf0f0436-65a7-4be4-8b27-97f814375cbb",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-d8d14e7b-9a17-40f5-a876-c54db69ee673",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-823cbdb5-e3f0-4367-808e-399903b7920b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d461c704-b136-4145-9fde-b3d86dd05542",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fc5d9061-b765-478c-97cb-62f167fe30bd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e94895e7-c7c2-4345-8c51-cea7d0c2041b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-9388998b-8eb3-4de7-a4a6-5b4522044cb8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-945c8159-fc17-4833-8f17-069e75fef611",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-fdb0810c-fcf1-4ea6-a2dc-8107b7c67065",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-d82170c7-ed80-4ea8-80bf-8ad5404a2b28",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-dc366fac-8f49-4454-9a87-fcd7324dd1d4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-7d555194-1690-4b82-8f88-d4c317c2935e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-48d16cf2-6f48-4dda-9d51-baf5671135cd",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-1e7dd53a-7135-4eae-b0ff-b716cb6c0d7f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7bb9becd-ca25-4bf6-89b9-0813d38ff3a8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-f3afa42d-a4f9-4f90-9156-f5f4bd68213b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a9bd6d76-7d8a-42b4-be68-1563e1c26ecc",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-320078ab-2f85-41f0-ac52-2ccdf5f6d710",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-7776037c-cbc7-4e35-b1f3-acfcf50a0a4b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-e79a4d26-f437-44f5-a016-8ef8ec874ea9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d1952fc4-bde6-4d67-9311-b447c5e6a1a2",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0239860d-9ad0-4730-ab15-befe17637042",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8ab43260-6bbb-402d-912c-ccb540b0def0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-bb037288-e3ff-4d91-bbb1-05a7e44ac14b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-21ca2108-1765-42cc-91b6-22a60b5c73b4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-c30f8f99-1c05-480b-843f-88748ad4a41f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5e9aedba-21e3-4343-a629-d5b7fd4d00f7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-31825f58-9c8d-492d-a40a-c4bc6550d705",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-39ad75c4-5233-4b82-922a-d878dc45bf11",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3c3b43c5-3053-4545-9175-728288070c74",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-551be52a-50e6-4652-bce8-81fa156a5f7d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0aaa874d-b572-47a7-bb2a-c1eb20924284",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fda70837-f18c-4941-8595-94b208e2c4a8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-8882be2b-6c2d-4e90-ae78-ae240f8cdf5a",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-fb83d2d0-fc0b-4c72-83e1-23485ab08040",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-5b43bf7e-dc24-4487-aa31-245bb0860111",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-febcd9d3-965b-4952-9c2e-90505e6ad72e",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-e214e82f-f634-43f9-bead-3a59029b3315",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-22371510-e40d-43f0-9d72-0536e1139420",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-fae1a239-fffb-4e30-8f9a-00ad4ebfd0c5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-5b00e3a8-b610-4b94-b32b-0f0a36031880",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/metrics.cc"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 4,
                  "endLine": 791,
                  "endColumn": 49,
                  "charOffset": 28641,
                  "charLength": 45,
                  "snippet": {
                    "text": "strncpy(hostIpAddress, ipAddress.c_str(), 15)",
                    "rendered": {
                      "text": "strncpy(hostIpAddress, ipAddress.c_str(), 15)",
                      "markdown": "`strncpy(hostIpAddress, ipAddress.c_str(), 15)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/metrics.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28641,
                        "charLength": 45
                      },
                      "insertedContent": {
                        "text": "strcpy_s(hostIpAddress,  15,  ipAddress.c_str())"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "strncpy is dangerous, as if the source contains 'n' or more characters, it will not null terminate the destination."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/metrics.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 28641,
                        "charLength": 45
                      },
                      "insertedContent": {
                        "text": "strlcpy(hostIpAddress,  ipAddress.c_str(),  15)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a50c1729-64a4-4801-922f-7798d56eecc1",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/metrics.cc"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 29,
                  "endLine": 790,
                  "endColumn": 38,
                  "charOffset": 28625,
                  "charLength": 9,
                  "snippet": {
                    "text": "127.0.0.1",
                    "rendered": {
                      "text": "127.0.0.1",
                      "markdown": "`127.0.0.1`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-f75ef13f-3594-4bbc-8d1b-b76a49427960",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cuda_utils.cc"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 4,
                  "endLine": 151,
                  "endColumn": 31,
                  "charOffset": 5080,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, src, byte_size)",
                    "rendered": {
                      "text": "memcpy(dst, src, byte_size)",
                      "markdown": "`memcpy(dst, src, byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cuda_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5080,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-cf0f0436-65a7-4be4-8b27-97f814375cbb",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/tritonserver.cc"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 21,
                  "endLine": 568,
                  "endColumn": 34,
                  "charOffset": 17974,
                  "charLength": 13,
                  "snippet": {
                    "text": "strlen(dtype)",
                    "rendered": {
                      "text": "strlen(dtype)",
                      "markdown": "`strlen(dtype)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/tritonserver.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17974,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strlen_s(dtype, <size of dtype>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/tritonserver.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17974,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strnlen(dtype, <size of dtype>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d8d14e7b-9a17-40f5-a876-c54db69ee673",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cuda_utils.cc"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 6,
                  "endLine": 148,
                  "endColumn": 33,
                  "charOffset": 5035,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, src, byte_size)",
                    "rendered": {
                      "text": "memcpy(dst, src, byte_size)",
                      "markdown": "`memcpy(dst, src, byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cuda_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5035,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-823cbdb5-e3f0-4367-808e-399903b7920b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                },
                "region": {
                  "startLine": 1381,
                  "startColumn": 6,
                  "endLine": 1383,
                  "endColumn": 32,
                  "charOffset": 52581,
                  "charLength": 107,
                  "snippet": {
                    "text": "memcpy(\n          corrid_p_ptr + sizeof(uint32_t), correlation_id.c_str(),\n          correlation_id_length)",
                    "rendered": {
                      "text": "memcpy(\n          corrid_p_ptr + sizeof(uint32_t), correlation_id.c_str(),\n          correlation_id_length)",
                      "markdown": "`memcpy(\n          corrid_p_ptr + sizeof(uint32_t), correlation_id.c_str(),\n          correlation_id_length)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 52581,
                        "charLength": 107
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          corrid_p_ptr + sizeof(uint32_t), <size of \n          corrid_p_ptr + sizeof(uint32_t)>,  correlation_id.c_str(), \n          correlation_id_length)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d461c704-b136-4145-9fde-b3d86dd05542",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cuda_utils.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 2,
                  "endLine": 44,
                  "endColumn": 71,
                  "charOffset": 1912,
                  "charLength": 69,
                  "snippet": {
                    "text": "memcpy(copy_params->dst_, copy_params->src_, copy_params->byte_size_)",
                    "rendered": {
                      "text": "memcpy(copy_params->dst_, copy_params->src_, copy_params->byte_size_)",
                      "markdown": "`memcpy(copy_params->dst_, copy_params->src_, copy_params->byte_size_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cuda_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1912,
                        "charLength": 69
                      },
                      "insertedContent": {
                        "text": "memcpy_s(copy_params->dst_, <size of copy_params->dst_>,  copy_params->src_,  copy_params->byte_size_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fc5d9061-b765-478c-97cb-62f167fe30bd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                },
                "region": {
                  "startLine": 1380,
                  "startColumn": 6,
                  "endLine": 1380,
                  "endColumn": 67,
                  "charOffset": 52511,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(corrid_p_ptr, &correlation_id_length, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(corrid_p_ptr, &correlation_id_length, sizeof(uint32_t)",
                      "markdown": "`memcpy(corrid_p_ptr, &correlation_id_length, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 52511,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(corrid_p_ptr, <size of corrid_p_ptr>,  &correlation_id_length,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e94895e7-c7c2-4345-8c51-cea7d0c2041b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                },
                "region": {
                  "startLine": 1388,
                  "startColumn": 6,
                  "endLine": 1388,
                  "endColumn": 46,
                  "charOffset": 52925,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(corrid_p_ptr, corrid_ptr, size_p)",
                    "rendered": {
                      "text": "memcpy(corrid_p_ptr, corrid_ptr, size_p)",
                      "markdown": "`memcpy(corrid_p_ptr, corrid_ptr, size_p)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 52925,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(corrid_p_ptr, <size of corrid_p_ptr>,  corrid_ptr,  size_p)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-9388998b-8eb3-4de7-a4a6-5b4522044cb8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 6,
                  "endLine": 459,
                  "endColumn": 58,
                  "charOffset": 16356,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(data_ptr, file_input.data(), total_byte_size)",
                    "rendered": {
                      "text": "memcpy(data_ptr, file_input.data(), total_byte_size)",
                      "markdown": "`memcpy(data_ptr, file_input.data(), total_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16356,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data_ptr, <size of data_ptr>,  file_input.data(),  total_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-945c8159-fc17-4833-8f17-069e75fef611",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/s3.h"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 37,
                  "endLine": 230,
                  "endColumn": 55,
                  "charOffset": 8905,
                  "charLength": 18,
                  "snippet": {
                    "text": "strlen(\"https://\")",
                    "rendered": {
                      "text": "strlen(\"https://\")",
                      "markdown": "`strlen(\"https://\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8905,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"https://\", <size of \"https://\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8905,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strnlen(\"https://\", <size of \"https://\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fdb0810c-fcf1-4ea6-a2dc-8107b7c67065",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/s3.h"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 38,
                  "endLine": 235,
                  "endColumn": 55,
                  "charOffset": 9095,
                  "charLength": 17,
                  "snippet": {
                    "text": "strlen(\"http://\")",
                    "rendered": {
                      "text": "strlen(\"http://\")",
                      "markdown": "`strlen(\"http://\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9095,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"http://\", <size of \"http://\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9095,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strnlen(\"http://\", <size of \"http://\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d82170c7-ed80-4ea8-80bf-8ad5404a2b28",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/s3.h"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 34,
                  "endLine": 220,
                  "endColumn": 49,
                  "charOffset": 8622,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(\"s3://\")",
                    "rendered": {
                      "text": "strlen(\"s3://\")",
                      "markdown": "`strlen(\"s3://\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8622,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"s3://\", <size of \"s3://\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8622,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(\"s3://\", <size of \"s3://\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-dc366fac-8f49-4454-9a87-fcd7324dd1d4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/s3.h"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 50,
                  "endLine": 187,
                  "endColumn": 65,
                  "charOffset": 7681,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(\"s3://\")",
                    "rendered": {
                      "text": "strlen(\"s3://\")",
                      "markdown": "`strlen(\"s3://\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7681,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"s3://\", <size of \"s3://\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7681,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(\"s3://\", <size of \"s3://\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7d555194-1690-4b82-8f88-d4c317c2935e",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/s3.h"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 17,
                  "endLine": 276,
                  "endColumn": 31,
                  "charOffset": 10202,
                  "charLength": 14,
                  "snippet": {
                    "text": "http://|https:",
                    "rendered": {
                      "text": "http://|https:",
                      "markdown": "`http://|https:`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10202,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "https://|https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-48d16cf2-6f48-4dda-9d51-baf5671135cd",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/backend_memory_manager.cc"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 16,
                  "endLine": 98,
                  "endColumn": 33,
                  "charOffset": 3678,
                  "charLength": 17,
                  "snippet": {
                    "text": "malloc(byte_size)",
                    "rendered": {
                      "text": "malloc(byte_size)",
                      "markdown": "`malloc(byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/backend_memory_manager.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3678,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1e7dd53a-7135-4eae-b0ff-b716cb6c0d7f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 2,
                  "endLine": 481,
                  "endColumn": 77,
                  "charOffset": 15205,
                  "charLength": 75,
                  "snippet": {
                    "text": "memcpy(&output_byte_size, packed_bytes.begin() + position, sizeof(uint64_t)",
                    "rendered": {
                      "text": "memcpy(&output_byte_size, packed_bytes.begin() + position, sizeof(uint64_t)",
                      "markdown": "`memcpy(&output_byte_size, packed_bytes.begin() + position, sizeof(uint64_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15205,
                        "charLength": 75
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&output_byte_size, <size of &output_byte_size>,  packed_bytes.begin() + position,  sizeof(uint64_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7bb9becd-ca25-4bf6-89b9-0813d38ff3a8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 2,
                  "endLine": 476,
                  "endColumn": 72,
                  "charOffset": 15047,
                  "charLength": 70,
                  "snippet": {
                    "text": "memcpy(shape.data(), packed_bytes.begin() + position, shape_byte_size)",
                    "rendered": {
                      "text": "memcpy(shape.data(), packed_bytes.begin() + position, shape_byte_size)",
                      "markdown": "`memcpy(shape.data(), packed_bytes.begin() + position, shape_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15047,
                        "charLength": 70
                      },
                      "insertedContent": {
                        "text": "memcpy_s(shape.data(), <size of shape.data()>,  packed_bytes.begin() + position,  shape_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-f3afa42d-a4f9-4f90-9156-f5f4bd68213b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 2,
                  "endLine": 472,
                  "endColumn": 76,
                  "charOffset": 14867,
                  "charLength": 74,
                  "snippet": {
                    "text": "memcpy(&shape_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(&shape_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                      "markdown": "`memcpy(&shape_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14867,
                        "charLength": 74
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&shape_byte_size, <size of &shape_byte_size>,  packed_bytes.begin() + position,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a9bd6d76-7d8a-42b4-be68-1563e1c26ecc",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 2,
                  "endLine": 463,
                  "endColumn": 76,
                  "charOffset": 14561,
                  "charLength": 74,
                  "snippet": {
                    "text": "memcpy(&dtype_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(&dtype_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                      "markdown": "`memcpy(&dtype_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14561,
                        "charLength": 74
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&dtype_byte_size, <size of &dtype_byte_size>,  packed_bytes.begin() + position,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-320078ab-2f85-41f0-ac52-2ccdf5f6d710",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 4,
                  "endLine": 374,
                  "endColumn": 72,
                  "charOffset": 11903,
                  "charLength": 68,
                  "snippet": {
                    "text": "memcpy(output_buffer, cache_output.buffer_, cache_output.byte_size_)",
                    "rendered": {
                      "text": "memcpy(output_buffer, cache_output.buffer_, cache_output.byte_size_)",
                      "markdown": "`memcpy(output_buffer, cache_output.buffer_, cache_output.byte_size_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11903,
                        "charLength": 68
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output_buffer, <size of output_buffer>,  cache_output.buffer_,  cache_output.byte_size_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-7776037c-cbc7-4e35-b1f3-acfcf50a0a4b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 2,
                  "endLine": 454,
                  "endColumn": 75,
                  "charOffset": 14262,
                  "charLength": 73,
                  "snippet": {
                    "text": "memcpy(&name_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(&name_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                      "markdown": "`memcpy(&name_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14262,
                        "charLength": 73
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&name_byte_size, <size of &name_byte_size>,  packed_bytes.begin() + position,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e79a4d26-f437-44f5-a016-8ef8ec874ea9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 9,
                  "endLine": 332,
                  "endColumn": 72,
                  "charOffset": 10407,
                  "charLength": 80,
                  "snippet": {
                    "text": "memcpy(\n        &packed_output_size, base + position, sizeof(packed_output_size)",
                    "rendered": {
                      "text": "memcpy(\n        &packed_output_size, base + position, sizeof(packed_output_size)",
                      "markdown": "`memcpy(\n        &packed_output_size, base + position, sizeof(packed_output_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10407,
                        "charLength": 80
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n        &packed_output_size, <size of \n        &packed_output_size>,  base + position,  sizeof(packed_output_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d1952fc4-bde6-4d67-9311-b447c5e6a1a2",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 7,
                  "endLine": 324,
                  "endColumn": 53,
                  "charOffset": 10197,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(&num_outputs, base, sizeof(num_outputs)",
                    "rendered": {
                      "text": "memcpy(&num_outputs, base, sizeof(num_outputs)",
                      "markdown": "`memcpy(&num_outputs, base, sizeof(num_outputs)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10197,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&num_outputs, <size of &num_outputs>,  base,  sizeof(num_outputs)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0239860d-9ad0-4730-ab15-befe17637042",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 2,
                  "endLine": 282,
                  "endColumn": 62,
                  "charOffset": 9014,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer + position, output_base, u64_output_byte_size)",
                    "rendered": {
                      "text": "memcpy(buffer + position, output_base, u64_output_byte_size)",
                      "markdown": "`memcpy(buffer + position, output_base, u64_output_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9014,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  output_base,  u64_output_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8ab43260-6bbb-402d-912c-ccb540b0def0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 2,
                  "endLine": 280,
                  "endColumn": 67,
                  "charOffset": 8912,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(buffer + position, &u64_output_byte_size, sizeof(uint64_t)",
                    "rendered": {
                      "text": "memcpy(buffer + position, &u64_output_byte_size, sizeof(uint64_t)",
                      "markdown": "`memcpy(buffer + position, &u64_output_byte_size, sizeof(uint64_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8912,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  &u64_output_byte_size,  sizeof(uint64_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-bb037288-e3ff-4d91-bbb1-05a7e44ac14b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 2,
                  "endLine": 276,
                  "endColumn": 58,
                  "charOffset": 8792,
                  "charLength": 56,
                  "snippet": {
                    "text": "memcpy(buffer + position, shape.data(), shape_byte_size)",
                    "rendered": {
                      "text": "memcpy(buffer + position, shape.data(), shape_byte_size)",
                      "markdown": "`memcpy(buffer + position, shape.data(), shape_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8792,
                        "charLength": 56
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  shape.data(),  shape_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-21ca2108-1765-42cc-91b6-22a60b5c73b4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 2,
                  "endLine": 274,
                  "endColumn": 62,
                  "charOffset": 8695,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer + position, &shape_byte_size, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(buffer + position, &shape_byte_size, sizeof(uint32_t)",
                      "markdown": "`memcpy(buffer + position, &shape_byte_size, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8695,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  &shape_byte_size,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c30f8f99-1c05-480b-843f-88748ad4a41f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 2,
                  "endLine": 270,
                  "endColumn": 59,
                  "charOffset": 8591,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(buffer + position, dtype.c_str(), dtype_byte_size)",
                    "rendered": {
                      "text": "memcpy(buffer + position, dtype.c_str(), dtype_byte_size)",
                      "markdown": "`memcpy(buffer + position, dtype.c_str(), dtype_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8591,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  dtype.c_str(),  dtype_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5e9aedba-21e3-4343-a629-d5b7fd4d00f7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 2,
                  "endLine": 268,
                  "endColumn": 62,
                  "charOffset": 8494,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer + position, &dtype_byte_size, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(buffer + position, &dtype_byte_size, sizeof(uint32_t)",
                      "markdown": "`memcpy(buffer + position, &dtype_byte_size, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8494,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  &dtype_byte_size,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-31825f58-9c8d-492d-a40a-c4bc6550d705",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 2,
                  "endLine": 264,
                  "endColumn": 57,
                  "charOffset": 8393,
                  "charLength": 55,
                  "snippet": {
                    "text": "memcpy(buffer + position, name.c_str(), name_byte_size)",
                    "rendered": {
                      "text": "memcpy(buffer + position, name.c_str(), name_byte_size)",
                      "markdown": "`memcpy(buffer + position, name.c_str(), name_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8393,
                        "charLength": 55
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  name.c_str(),  name_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-39ad75c4-5233-4b82-922a-d878dc45bf11",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 2,
                  "endLine": 262,
                  "endColumn": 61,
                  "charOffset": 8297,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(buffer + position, &name_byte_size, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(buffer + position, &name_byte_size, sizeof(uint32_t)",
                      "markdown": "`memcpy(buffer + position, &name_byte_size, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8297,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  &name_byte_size,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3c3b43c5-3053-4545-9175-728288070c74",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 7,
                  "endLine": 171,
                  "endColumn": 50,
                  "charOffset": 5347,
                  "charLength": 43,
                  "snippet": {
                    "text": "memcpy(base, &num_outputs, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(base, &num_outputs, sizeof(uint32_t)",
                      "markdown": "`memcpy(base, &num_outputs, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5347,
                        "charLength": 43
                      },
                      "insertedContent": {
                        "text": "memcpy_s(base, <size of base>,  &num_outputs,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-551be52a-50e6-4652-bce8-81fa156a5f7d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 2,
                  "endLine": 258,
                  "endColumn": 62,
                  "charOffset": 8189,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer + position, &total_byte_size, sizeof(uint64_t)",
                    "rendered": {
                      "text": "memcpy(buffer + position, &total_byte_size, sizeof(uint64_t)",
                      "markdown": "`memcpy(buffer + position, &total_byte_size, sizeof(uint64_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8189,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  &total_byte_size,  sizeof(uint64_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0aaa874d-b572-47a7-bb2a-c1eb20924284",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_manager.cc"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 9,
                  "endLine": 144,
                  "endColumn": 68,
                  "charOffset": 5140,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(cache_buffer, buffers_[i].data(), cache_buffer_size)",
                    "rendered": {
                      "text": "memcpy(cache_buffer, buffers_[i].data(), cache_buffer_size)",
                      "markdown": "`memcpy(cache_buffer, buffers_[i].data(), cache_buffer_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_manager.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5140,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(cache_buffer, <size of cache_buffer>,  buffers_[i].data(),  cache_buffer_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fda70837-f18c-4941-8595-94b208e2c4a8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_manager.cc"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 9,
                  "endLine": 96,
                  "endColumn": 42,
                  "charOffset": 3550,
                  "charLength": 33,
                  "snippet": {
                    "text": "memcpy(new_base, base, byte_size)",
                    "rendered": {
                      "text": "memcpy(new_base, base, byte_size)",
                      "markdown": "`memcpy(new_base, base, byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_manager.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3550,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_base, <size of new_base>,  base,  byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8882be2b-6c2d-4e90-ae78-ae240f8cdf5a",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_manager.cc"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 21,
                  "endLine": 95,
                  "endColumn": 38,
                  "charOffset": 3522,
                  "charLength": 17,
                  "snippet": {
                    "text": "malloc(byte_size)",
                    "rendered": {
                      "text": "malloc(byte_size)",
                      "markdown": "`malloc(byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_manager.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3522,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fb83d2d0-fc0b-4c72-83e1-23485ab08040",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/backend_model_instance.cc"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 30,
                  "endLine": 428,
                  "endColumn": 35,
                  "charOffset": 16884,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-5b43bf7e-dc24-4487-aa31-245bb0860111",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/gcs.h"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 42,
                  "endLine": 141,
                  "endColumn": 57,
                  "charOffset": 5317,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(\"gs://\")",
                    "rendered": {
                      "text": "strlen(\"gs://\")",
                      "markdown": "`strlen(\"gs://\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/gcs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5317,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"gs://\", <size of \"gs://\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/gcs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5317,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(\"gs://\", <size of \"gs://\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-febcd9d3-965b-4952-9c2e-90505e6ad72e",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/pinned_memory_manager.cc"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 11,
                  "endLine": 174,
                  "endColumn": 23,
                  "charOffset": 5522,
                  "charLength": 12,
                  "snippet": {
                    "text": "malloc(size)",
                    "rendered": {
                      "text": "malloc(size)",
                      "markdown": "`malloc(size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/pinned_memory_manager.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5522,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e214e82f-f634-43f9-bead-3a59029b3315",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sequence_state.cc"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 8,
                  "endLine": 209,
                  "endColumn": 59,
                  "charOffset": 7731,
                  "charLength": 113,
                  "snippet": {
                    "text": "memcpy(\n            dst_buffer, initial_state_buffer,\n            initial_state_it->second.data_->TotalByteSize()",
                    "rendered": {
                      "text": "memcpy(\n            dst_buffer, initial_state_buffer,\n            initial_state_it->second.data_->TotalByteSize()",
                      "markdown": "`memcpy(\n            dst_buffer, initial_state_buffer,\n            initial_state_it->second.data_->TotalByteSize()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/sequence_state.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7731,
                        "charLength": 113
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            dst_buffer, <size of \n            dst_buffer>,  initial_state_buffer, \n            initial_state_it->second.data_->TotalByteSize()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-22371510-e40d-43f0-9d72-0536e1139420",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/backend_model_instance.cc"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 12,
                  "endLine": 73,
                  "endColumn": 29,
                  "charOffset": 2951,
                  "charLength": 17,
                  "snippet": {
                    "text": "malloc(byte_size)",
                    "rendered": {
                      "text": "malloc(byte_size)",
                      "markdown": "`malloc(byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/backend_model_instance.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2951,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fae1a239-fffb-4e30-8f9a-00ad4ebfd0c5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infer_request.cc"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 9,
                  "endLine": 557,
                  "endColumn": 77,
                  "charOffset": 18833,
                  "charLength": 68,
                  "snippet": {
                    "text": "memcpy(data->MutableBuffer(), from_data_buffer, from_data_byte_size)",
                    "rendered": {
                      "text": "memcpy(data->MutableBuffer(), from_data_buffer, from_data_byte_size)",
                      "markdown": "`memcpy(data->MutableBuffer(), from_data_buffer, from_data_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/infer_request.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18833,
                        "charLength": 68
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data->MutableBuffer(), <size of data->MutableBuffer()>,  from_data_buffer,  from_data_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}