{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-94279e5c-86a6-4e87-8760-dc7dae96e904",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS111237"
                ]
              }
            },
            {
              "id": "glog-e2db651b-1817-45bf-bfb9-17ea09209d24",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS137138"
                ]
              }
            },
            {
              "id": "glog-5e6ed9cd-cbe4-4007-8de3-85b427639e95",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-c7d7e28c-e629-4eaf-8f1d-2041c5a551b7",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-508fbca4-bf34-49f0-a3a9-a5ca3d87ab0f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-186a97e9-13df-414c-9563-d127c4e0916c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-01f36887-2325-4a6e-add4-767846178c78",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-8c14e197-44b2-4979-a12c-6f9b12c3ef56",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "glog-3833d18d-7366-4a49-a16c-4ec0c9eba651",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1ee2518e-5c3d-4ae2-90eb-ca53e1d17f73",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-889f62c0-6372-44d5-8c53-b1aa47bf4014",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-007e0b56-28bc-48c2-9943-f449b1af0351",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ff9027f4-c247-473e-b3cb-9b48a06638a8",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-2090b606-3db8-4248-b23f-5232de6e36a3",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-55439b8b-9413-43cc-890d-9a1539655334",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d670425e-75d5-4e3c-a9e7-9e1f09aeab3d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-52e9c2c8-d4ee-4677-ad72-e0e0455ee80f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-1f2dd0e9-a339-479f-9613-7e8e386da723",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fca0bd71-084e-4909-8a79-5819f6eabba9",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3524700d-a91e-4f47-9b60-f7b3050a549b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3408c497-2d64-4a50-930f-7f05fbf96d21",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-81143d5f-0c9d-4e4d-ab77-378516fd6879",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-3e61abc3-2b04-444a-9521-fc2a24be9c33",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-fac2b94c-1528-470b-8f0c-503b7d198321",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-0811b147-259a-49d5-a027-48a74b6e59ac",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-4af0fd52-e0aa-4932-82f5-d10774876682",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-90967595-dc9a-4fe2-ac68-f384d7b2b194",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-94688a96-a9f7-41a1-a130-7725e1999756",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a9e93a02-c7fd-47ba-a28e-cc40c01503c4",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-5a44a6e2-8d5f-4d1d-83e2-2eda395a2ed0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            },
            {
              "id": "glog-b95e3d0e-7bae-48b7-bf23-3dff9c18a222",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-befba8d6-935a-42ab-9137-88051c03fa47",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-ab4c4c51-5163-448e-8e85-a323d97118ad",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-16f29839-4651-4dc4-a39b-7a55d907bc6c",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-dd1b51e2-c906-47fa-840f-9bedc969494f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-b0482efa-181d-4118-9b0b-aa70f93226e5",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-43146444-81d1-429a-b7ad-4ac1281f458d",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-52bdefe1-c489-456b-98f5-300ac143796f",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-a61413c3-b57f-4f0b-8529-dd44a288c81b",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS121708"
                ]
              }
            },
            {
              "id": "glog-d921e497-6db8-41f4-918a-7c37c27fcab0",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS148264"
                ]
              }
            },
            {
              "id": "glog-f8072948-69da-43f7-9d11-9cfedcbdfb15",
              "help": {
                "text": ""
              },
              "properties": {
                "tags": [
                  "DS161085"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-288eba01-c6c1-40d2-808a-6a9241a5bed8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/metrics.cc"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 29,
                  "endLine": 790,
                  "endColumn": 38,
                  "charOffset": 28625,
                  "charLength": 9,
                  "snippet": {
                    "text": "127.0.0.1",
                    "rendered": {
                      "text": "127.0.0.1",
                      "markdown": "`127.0.0.1`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "ManualReview",
            "DevSkimConfidence": "High",
            "tags": [
              "Hygiene.Network.AccessingLocalhost"
            ]
          }
        },
        {
          "ruleId": "glog-65396a7f-5cea-459b-a14e-b9c636dc3414",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/pinned_memory_manager.cc"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 11,
                  "endLine": 174,
                  "endColumn": 23,
                  "charOffset": 5522,
                  "charLength": 12,
                  "snippet": {
                    "text": "malloc(size)",
                    "rendered": {
                      "text": "malloc(size)",
                      "markdown": "`malloc(size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/pinned_memory_manager.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5522,
                        "charLength": 12
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-e2db651b-1817-45bf-bfb9-17ea09209d24",
          "kind": "fail",
          "level": "warning",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/s3.h"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 17,
                  "endLine": 276,
                  "endColumn": 31,
                  "charOffset": 10202,
                  "charLength": 14,
                  "snippet": {
                    "text": "http://|https:",
                    "rendered": {
                      "text": "http://|https:",
                      "markdown": "`http://|https:`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "An HTTP-based URL without TLS was detected."
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10202,
                        "charLength": 14
                      },
                      "insertedContent": {
                        "text": "https://|https:"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "ThreatModel.Integration.HTTP"
            ]
          }
        },
        {
          "ruleId": "glog-5e6ed9cd-cbe4-4007-8de3-85b427639e95",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/s3.h"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 38,
                  "endLine": 235,
                  "endColumn": 55,
                  "charOffset": 9095,
                  "charLength": 17,
                  "snippet": {
                    "text": "strlen(\"http://\")",
                    "rendered": {
                      "text": "strlen(\"http://\")",
                      "markdown": "`strlen(\"http://\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9095,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"http://\", <size of \"http://\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9095,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "strnlen(\"http://\", <size of \"http://\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-c7d7e28c-e629-4eaf-8f1d-2041c5a551b7",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/s3.h"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 37,
                  "endLine": 230,
                  "endColumn": 55,
                  "charOffset": 8905,
                  "charLength": 18,
                  "snippet": {
                    "text": "strlen(\"https://\")",
                    "rendered": {
                      "text": "strlen(\"https://\")",
                      "markdown": "`strlen(\"https://\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8905,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"https://\", <size of \"https://\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8905,
                        "charLength": 18
                      },
                      "insertedContent": {
                        "text": "strnlen(\"https://\", <size of \"https://\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-508fbca4-bf34-49f0-a3a9-a5ca3d87ab0f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/s3.h"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 34,
                  "endLine": 220,
                  "endColumn": 49,
                  "charOffset": 8622,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(\"s3://\")",
                    "rendered": {
                      "text": "strlen(\"s3://\")",
                      "markdown": "`strlen(\"s3://\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8622,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"s3://\", <size of \"s3://\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8622,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(\"s3://\", <size of \"s3://\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-186a97e9-13df-414c-9563-d127c4e0916c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/s3.h"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 50,
                  "endLine": 187,
                  "endColumn": 65,
                  "charOffset": 7681,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(\"s3://\")",
                    "rendered": {
                      "text": "strlen(\"s3://\")",
                      "markdown": "`strlen(\"s3://\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7681,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"s3://\", <size of \"s3://\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/s3.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7681,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(\"s3://\", <size of \"s3://\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-01f36887-2325-4a6e-add4-767846178c78",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/tritonserver.cc"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 21,
                  "endLine": 568,
                  "endColumn": 34,
                  "charOffset": 17974,
                  "charLength": 13,
                  "snippet": {
                    "text": "strlen(dtype)",
                    "rendered": {
                      "text": "strlen(dtype)",
                      "markdown": "`strlen(dtype)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/tritonserver.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17974,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strlen_s(dtype, <size of dtype>)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/tritonserver.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 17974,
                        "charLength": 13
                      },
                      "insertedContent": {
                        "text": "strnlen(dtype, <size of dtype>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-8c14e197-44b2-4979-a12c-6f9b12c3ef56",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/filesystem/implementations/gcs.h"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 42,
                  "endLine": 141,
                  "endColumn": 57,
                  "charOffset": 5317,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(\"gs://\")",
                    "rendered": {
                      "text": "strlen(\"gs://\")",
                      "markdown": "`strlen(\"gs://\")`"
                    }
                  },
                  "sourceLanguage": "c"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/gcs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5317,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"gs://\", <size of \"gs://\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/filesystem/implementations/gcs.h"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5317,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(\"gs://\", <size of \"gs://\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3833d18d-7366-4a49-a16c-4ec0c9eba651",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 2,
                  "endLine": 481,
                  "endColumn": 77,
                  "charOffset": 15205,
                  "charLength": 75,
                  "snippet": {
                    "text": "memcpy(&output_byte_size, packed_bytes.begin() + position, sizeof(uint64_t)",
                    "rendered": {
                      "text": "memcpy(&output_byte_size, packed_bytes.begin() + position, sizeof(uint64_t)",
                      "markdown": "`memcpy(&output_byte_size, packed_bytes.begin() + position, sizeof(uint64_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15205,
                        "charLength": 75
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&output_byte_size, <size of &output_byte_size>,  packed_bytes.begin() + position,  sizeof(uint64_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1ee2518e-5c3d-4ae2-90eb-ca53e1d17f73",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/backend_memory_manager.cc"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 16,
                  "endLine": 98,
                  "endColumn": 33,
                  "charOffset": 3678,
                  "charLength": 17,
                  "snippet": {
                    "text": "malloc(byte_size)",
                    "rendered": {
                      "text": "malloc(byte_size)",
                      "markdown": "`malloc(byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/backend_memory_manager.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3678,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-889f62c0-6372-44d5-8c53-b1aa47bf4014",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 2,
                  "endLine": 476,
                  "endColumn": 72,
                  "charOffset": 15047,
                  "charLength": 70,
                  "snippet": {
                    "text": "memcpy(shape.data(), packed_bytes.begin() + position, shape_byte_size)",
                    "rendered": {
                      "text": "memcpy(shape.data(), packed_bytes.begin() + position, shape_byte_size)",
                      "markdown": "`memcpy(shape.data(), packed_bytes.begin() + position, shape_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 15047,
                        "charLength": 70
                      },
                      "insertedContent": {
                        "text": "memcpy_s(shape.data(), <size of shape.data()>,  packed_bytes.begin() + position,  shape_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-007e0b56-28bc-48c2-9943-f449b1af0351",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 472,
                  "startColumn": 2,
                  "endLine": 472,
                  "endColumn": 76,
                  "charOffset": 14867,
                  "charLength": 74,
                  "snippet": {
                    "text": "memcpy(&shape_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(&shape_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                      "markdown": "`memcpy(&shape_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14867,
                        "charLength": 74
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&shape_byte_size, <size of &shape_byte_size>,  packed_bytes.begin() + position,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ff9027f4-c247-473e-b3cb-9b48a06638a8",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 2,
                  "endLine": 463,
                  "endColumn": 76,
                  "charOffset": 14561,
                  "charLength": 74,
                  "snippet": {
                    "text": "memcpy(&dtype_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(&dtype_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                      "markdown": "`memcpy(&dtype_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14561,
                        "charLength": 74
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&dtype_byte_size, <size of &dtype_byte_size>,  packed_bytes.begin() + position,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-2090b606-3db8-4248-b23f-5232de6e36a3",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 2,
                  "endLine": 454,
                  "endColumn": 75,
                  "charOffset": 14262,
                  "charLength": 73,
                  "snippet": {
                    "text": "memcpy(&name_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(&name_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)",
                      "markdown": "`memcpy(&name_byte_size, packed_bytes.begin() + position, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 14262,
                        "charLength": 73
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&name_byte_size, <size of &name_byte_size>,  packed_bytes.begin() + position,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-55439b8b-9413-43cc-890d-9a1539655334",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 374,
                  "startColumn": 4,
                  "endLine": 374,
                  "endColumn": 72,
                  "charOffset": 11903,
                  "charLength": 68,
                  "snippet": {
                    "text": "memcpy(output_buffer, cache_output.buffer_, cache_output.byte_size_)",
                    "rendered": {
                      "text": "memcpy(output_buffer, cache_output.buffer_, cache_output.byte_size_)",
                      "markdown": "`memcpy(output_buffer, cache_output.buffer_, cache_output.byte_size_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 11903,
                        "charLength": 68
                      },
                      "insertedContent": {
                        "text": "memcpy_s(output_buffer, <size of output_buffer>,  cache_output.buffer_,  cache_output.byte_size_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d670425e-75d5-4e3c-a9e7-9e1f09aeab3d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 331,
                  "startColumn": 9,
                  "endLine": 332,
                  "endColumn": 72,
                  "charOffset": 10407,
                  "charLength": 80,
                  "snippet": {
                    "text": "memcpy(\n        &packed_output_size, base + position, sizeof(packed_output_size)",
                    "rendered": {
                      "text": "memcpy(\n        &packed_output_size, base + position, sizeof(packed_output_size)",
                      "markdown": "`memcpy(\n        &packed_output_size, base + position, sizeof(packed_output_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10407,
                        "charLength": 80
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n        &packed_output_size, <size of \n        &packed_output_size>,  base + position,  sizeof(packed_output_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-52e9c2c8-d4ee-4677-ad72-e0e0455ee80f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 7,
                  "endLine": 324,
                  "endColumn": 53,
                  "charOffset": 10197,
                  "charLength": 46,
                  "snippet": {
                    "text": "memcpy(&num_outputs, base, sizeof(num_outputs)",
                    "rendered": {
                      "text": "memcpy(&num_outputs, base, sizeof(num_outputs)",
                      "markdown": "`memcpy(&num_outputs, base, sizeof(num_outputs)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 10197,
                        "charLength": 46
                      },
                      "insertedContent": {
                        "text": "memcpy_s(&num_outputs, <size of &num_outputs>,  base,  sizeof(num_outputs)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-1f2dd0e9-a339-479f-9613-7e8e386da723",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 280,
                  "startColumn": 2,
                  "endLine": 280,
                  "endColumn": 67,
                  "charOffset": 8912,
                  "charLength": 65,
                  "snippet": {
                    "text": "memcpy(buffer + position, &u64_output_byte_size, sizeof(uint64_t)",
                    "rendered": {
                      "text": "memcpy(buffer + position, &u64_output_byte_size, sizeof(uint64_t)",
                      "markdown": "`memcpy(buffer + position, &u64_output_byte_size, sizeof(uint64_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8912,
                        "charLength": 65
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  &u64_output_byte_size,  sizeof(uint64_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fca0bd71-084e-4909-8a79-5819f6eabba9",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 2,
                  "endLine": 282,
                  "endColumn": 62,
                  "charOffset": 9014,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer + position, output_base, u64_output_byte_size)",
                    "rendered": {
                      "text": "memcpy(buffer + position, output_base, u64_output_byte_size)",
                      "markdown": "`memcpy(buffer + position, output_base, u64_output_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 9014,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  output_base,  u64_output_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3524700d-a91e-4f47-9b60-f7b3050a549b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 2,
                  "endLine": 276,
                  "endColumn": 58,
                  "charOffset": 8792,
                  "charLength": 56,
                  "snippet": {
                    "text": "memcpy(buffer + position, shape.data(), shape_byte_size)",
                    "rendered": {
                      "text": "memcpy(buffer + position, shape.data(), shape_byte_size)",
                      "markdown": "`memcpy(buffer + position, shape.data(), shape_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8792,
                        "charLength": 56
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  shape.data(),  shape_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3408c497-2d64-4a50-930f-7f05fbf96d21",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 2,
                  "endLine": 274,
                  "endColumn": 62,
                  "charOffset": 8695,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer + position, &shape_byte_size, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(buffer + position, &shape_byte_size, sizeof(uint32_t)",
                      "markdown": "`memcpy(buffer + position, &shape_byte_size, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8695,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  &shape_byte_size,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-81143d5f-0c9d-4e4d-ab77-378516fd6879",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 2,
                  "endLine": 270,
                  "endColumn": 59,
                  "charOffset": 8591,
                  "charLength": 57,
                  "snippet": {
                    "text": "memcpy(buffer + position, dtype.c_str(), dtype_byte_size)",
                    "rendered": {
                      "text": "memcpy(buffer + position, dtype.c_str(), dtype_byte_size)",
                      "markdown": "`memcpy(buffer + position, dtype.c_str(), dtype_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8591,
                        "charLength": 57
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  dtype.c_str(),  dtype_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-3e61abc3-2b04-444a-9521-fc2a24be9c33",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 2,
                  "endLine": 268,
                  "endColumn": 62,
                  "charOffset": 8494,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer + position, &dtype_byte_size, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(buffer + position, &dtype_byte_size, sizeof(uint32_t)",
                      "markdown": "`memcpy(buffer + position, &dtype_byte_size, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8494,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  &dtype_byte_size,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-fac2b94c-1528-470b-8f0c-503b7d198321",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 2,
                  "endLine": 264,
                  "endColumn": 57,
                  "charOffset": 8393,
                  "charLength": 55,
                  "snippet": {
                    "text": "memcpy(buffer + position, name.c_str(), name_byte_size)",
                    "rendered": {
                      "text": "memcpy(buffer + position, name.c_str(), name_byte_size)",
                      "markdown": "`memcpy(buffer + position, name.c_str(), name_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8393,
                        "charLength": 55
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  name.c_str(),  name_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-0811b147-259a-49d5-a027-48a74b6e59ac",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 2,
                  "endLine": 258,
                  "endColumn": 62,
                  "charOffset": 8189,
                  "charLength": 60,
                  "snippet": {
                    "text": "memcpy(buffer + position, &total_byte_size, sizeof(uint64_t)",
                    "rendered": {
                      "text": "memcpy(buffer + position, &total_byte_size, sizeof(uint64_t)",
                      "markdown": "`memcpy(buffer + position, &total_byte_size, sizeof(uint64_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8189,
                        "charLength": 60
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  &total_byte_size,  sizeof(uint64_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-4af0fd52-e0aa-4932-82f5-d10774876682",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 2,
                  "endLine": 262,
                  "endColumn": 61,
                  "charOffset": 8297,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(buffer + position, &name_byte_size, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(buffer + position, &name_byte_size, sizeof(uint32_t)",
                      "markdown": "`memcpy(buffer + position, &name_byte_size, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 8297,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(buffer + position, <size of buffer + position>,  &name_byte_size,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-90967595-dc9a-4fe2-ac68-f384d7b2b194",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_manager.cc"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 9,
                  "endLine": 144,
                  "endColumn": 68,
                  "charOffset": 5140,
                  "charLength": 59,
                  "snippet": {
                    "text": "memcpy(cache_buffer, buffers_[i].data(), cache_buffer_size)",
                    "rendered": {
                      "text": "memcpy(cache_buffer, buffers_[i].data(), cache_buffer_size)",
                      "markdown": "`memcpy(cache_buffer, buffers_[i].data(), cache_buffer_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_manager.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5140,
                        "charLength": 59
                      },
                      "insertedContent": {
                        "text": "memcpy_s(cache_buffer, <size of cache_buffer>,  buffers_[i].data(),  cache_buffer_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-94688a96-a9f7-41a1-a130-7725e1999756",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_entry.cc"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 7,
                  "endLine": 171,
                  "endColumn": 50,
                  "charOffset": 5347,
                  "charLength": 43,
                  "snippet": {
                    "text": "memcpy(base, &num_outputs, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(base, &num_outputs, sizeof(uint32_t)",
                      "markdown": "`memcpy(base, &num_outputs, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_entry.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5347,
                        "charLength": 43
                      },
                      "insertedContent": {
                        "text": "memcpy_s(base, <size of base>,  &num_outputs,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a9e93a02-c7fd-47ba-a28e-cc40c01503c4",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_manager.cc"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 9,
                  "endLine": 96,
                  "endColumn": 42,
                  "charOffset": 3550,
                  "charLength": 33,
                  "snippet": {
                    "text": "memcpy(new_base, base, byte_size)",
                    "rendered": {
                      "text": "memcpy(new_base, base, byte_size)",
                      "markdown": "`memcpy(new_base, base, byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_manager.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3550,
                        "charLength": 33
                      },
                      "insertedContent": {
                        "text": "memcpy_s(new_base, <size of new_base>,  base,  byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-5a44a6e2-8d5f-4d1d-83e2-2eda395a2ed0",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cache_manager.cc"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 21,
                  "endLine": 95,
                  "endColumn": 38,
                  "charOffset": 3522,
                  "charLength": 17,
                  "snippet": {
                    "text": "malloc(byte_size)",
                    "rendered": {
                      "text": "malloc(byte_size)",
                      "markdown": "`malloc(byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cache_manager.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3522,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b95e3d0e-7bae-48b7-bf23-3dff9c18a222",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cuda_utils.cc"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 4,
                  "endLine": 151,
                  "endColumn": 31,
                  "charOffset": 5080,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, src, byte_size)",
                    "rendered": {
                      "text": "memcpy(dst, src, byte_size)",
                      "markdown": "`memcpy(dst, src, byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cuda_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5080,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-befba8d6-935a-42ab-9137-88051c03fa47",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cuda_utils.cc"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 6,
                  "endLine": 148,
                  "endColumn": 33,
                  "charOffset": 5035,
                  "charLength": 27,
                  "snippet": {
                    "text": "memcpy(dst, src, byte_size)",
                    "rendered": {
                      "text": "memcpy(dst, src, byte_size)",
                      "markdown": "`memcpy(dst, src, byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cuda_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 5035,
                        "charLength": 27
                      },
                      "insertedContent": {
                        "text": "memcpy_s(dst, <size of dst>,  src,  byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-ab4c4c51-5163-448e-8e85-a323d97118ad",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/cuda_utils.cc"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 2,
                  "endLine": 44,
                  "endColumn": 71,
                  "charOffset": 1912,
                  "charLength": 69,
                  "snippet": {
                    "text": "memcpy(copy_params->dst_, copy_params->src_, copy_params->byte_size_)",
                    "rendered": {
                      "text": "memcpy(copy_params->dst_, copy_params->src_, copy_params->byte_size_)",
                      "markdown": "`memcpy(copy_params->dst_, copy_params->src_, copy_params->byte_size_)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/cuda_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 1912,
                        "charLength": 69
                      },
                      "insertedContent": {
                        "text": "memcpy_s(copy_params->dst_, <size of copy_params->dst_>,  copy_params->src_,  copy_params->byte_size_)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-16f29839-4651-4dc4-a39b-7a55d907bc6c",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sequence_state.cc"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 8,
                  "endLine": 209,
                  "endColumn": 59,
                  "charOffset": 7731,
                  "charLength": 113,
                  "snippet": {
                    "text": "memcpy(\n            dst_buffer, initial_state_buffer,\n            initial_state_it->second.data_->TotalByteSize()",
                    "rendered": {
                      "text": "memcpy(\n            dst_buffer, initial_state_buffer,\n            initial_state_it->second.data_->TotalByteSize()",
                      "markdown": "`memcpy(\n            dst_buffer, initial_state_buffer,\n            initial_state_it->second.data_->TotalByteSize()`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/sequence_state.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 7731,
                        "charLength": 113
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n            dst_buffer, <size of \n            dst_buffer>,  initial_state_buffer, \n            initial_state_it->second.data_->TotalByteSize()"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-dd1b51e2-c906-47fa-840f-9bedc969494f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                },
                "region": {
                  "startLine": 1388,
                  "startColumn": 6,
                  "endLine": 1388,
                  "endColumn": 46,
                  "charOffset": 52925,
                  "charLength": 40,
                  "snippet": {
                    "text": "memcpy(corrid_p_ptr, corrid_ptr, size_p)",
                    "rendered": {
                      "text": "memcpy(corrid_p_ptr, corrid_ptr, size_p)",
                      "markdown": "`memcpy(corrid_p_ptr, corrid_ptr, size_p)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 52925,
                        "charLength": 40
                      },
                      "insertedContent": {
                        "text": "memcpy_s(corrid_p_ptr, <size of corrid_p_ptr>,  corrid_ptr,  size_p)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-b0482efa-181d-4118-9b0b-aa70f93226e5",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                },
                "region": {
                  "startLine": 1381,
                  "startColumn": 6,
                  "endLine": 1383,
                  "endColumn": 32,
                  "charOffset": 52581,
                  "charLength": 107,
                  "snippet": {
                    "text": "memcpy(\n          corrid_p_ptr + sizeof(uint32_t), correlation_id.c_str(),\n          correlation_id_length)",
                    "rendered": {
                      "text": "memcpy(\n          corrid_p_ptr + sizeof(uint32_t), correlation_id.c_str(),\n          correlation_id_length)",
                      "markdown": "`memcpy(\n          corrid_p_ptr + sizeof(uint32_t), correlation_id.c_str(),\n          correlation_id_length)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 52581,
                        "charLength": 107
                      },
                      "insertedContent": {
                        "text": "memcpy_s(\n          corrid_p_ptr + sizeof(uint32_t), <size of \n          corrid_p_ptr + sizeof(uint32_t)>,  correlation_id.c_str(), \n          correlation_id_length)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-43146444-81d1-429a-b7ad-4ac1281f458d",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                },
                "region": {
                  "startLine": 1380,
                  "startColumn": 6,
                  "endLine": 1380,
                  "endColumn": 67,
                  "charOffset": 52511,
                  "charLength": 61,
                  "snippet": {
                    "text": "memcpy(corrid_p_ptr, &correlation_id_length, sizeof(uint32_t)",
                    "rendered": {
                      "text": "memcpy(corrid_p_ptr, &correlation_id_length, sizeof(uint32_t)",
                      "markdown": "`memcpy(corrid_p_ptr, &correlation_id_length, sizeof(uint32_t)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 52511,
                        "charLength": 61
                      },
                      "insertedContent": {
                        "text": "memcpy_s(corrid_p_ptr, <size of corrid_p_ptr>,  &correlation_id_length,  sizeof(uint32_t)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-52bdefe1-c489-456b-98f5-300ac143796f",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                },
                "region": {
                  "startLine": 459,
                  "startColumn": 6,
                  "endLine": 459,
                  "endColumn": 58,
                  "charOffset": 16356,
                  "charLength": 52,
                  "snippet": {
                    "text": "memcpy(data_ptr, file_input.data(), total_byte_size)",
                    "rendered": {
                      "text": "memcpy(data_ptr, file_input.data(), total_byte_size)",
                      "markdown": "`memcpy(data_ptr, file_input.data(), total_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/sequence_batch_scheduler/sequence_batch_scheduler.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 16356,
                        "charLength": 52
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data_ptr, <size of data_ptr>,  file_input.data(),  total_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-a61413c3-b57f-4f0b-8529-dd44a288c81b",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/infer_request.cc"
                },
                "region": {
                  "startLine": 557,
                  "startColumn": 9,
                  "endLine": 557,
                  "endColumn": 77,
                  "charOffset": 18833,
                  "charLength": 68,
                  "snippet": {
                    "text": "memcpy(data->MutableBuffer(), from_data_buffer, from_data_byte_size)",
                    "rendered": {
                      "text": "memcpy(data->MutableBuffer(), from_data_buffer, from_data_byte_size)",
                      "markdown": "`memcpy(data->MutableBuffer(), from_data_buffer, from_data_byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "There are a number of conditions in which memcpy can introduce a vulnerability (mismatched buffer sizes, null pointers, etc.). More secure alternitives perform additional validation of the source and destination buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/infer_request.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 18833,
                        "charLength": 68
                      },
                      "insertedContent": {
                        "text": "memcpy_s(data->MutableBuffer(), <size of data->MutableBuffer()>,  from_data_buffer,  from_data_byte_size)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "glog-d921e497-6db8-41f4-918a-7c37c27fcab0",
          "kind": "fail",
          "level": "error",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/backend_model_instance.cc"
                },
                "region": {
                  "startLine": 428,
                  "startColumn": 30,
                  "endLine": 428,
                  "endColumn": 35,
                  "charOffset": 16884,
                  "charLength": 5,
                  "snippet": {
                    "text": "rand(",
                    "rendered": {
                      "text": "rand(",
                      "markdown": "`rand(`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Important",
            "DevSkimConfidence": "High",
            "tags": [
              "Cryptography.PRNG.Weak"
            ]
          }
        },
        {
          "ruleId": "glog-f8072948-69da-43f7-9d11-9cfedcbdfb15",
          "kind": "fail",
          "level": "note",
          "message": {},
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/backend_model_instance.cc"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 12,
                  "endLine": 73,
                  "endColumn": 29,
                  "charOffset": 2951,
                  "charLength": 17,
                  "snippet": {
                    "text": "malloc(byte_size)",
                    "rendered": {
                      "text": "malloc(byte_size)",
                      "markdown": "`malloc(byte_size)`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If the value provided to malloc is the result of unsafe integer math, it can result in an exploitable condition. "
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/backend_model_instance.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 2951,
                        "charLength": 17
                      },
                      "insertedContent": {
                        "text": "calloc(<number of elements>, <size of each element>)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}